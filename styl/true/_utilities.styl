use('lib/str-length.js');

// map-keys($hash)
// 
// **[private:{list}]** Returns a list with only the keys of the selected hash
// 
// Weight: 0
// 
// $hash - **{hash}** ***Hash to extract the keys from***
// 
// Styleguide Functions.map-keys
use('lib/map-keys.js');

// $_true-error-output-override = { value }
// 
// **[public]** Value key stores the desired value
// 
// Weight: -10
// 
// $value = true - **{boolean}** ***The actual output override value***
// 
// Styleguide Variables.$_true-error-output-override
$_true-error-output-override = {
  value: true
};

// is-list($list)
// 
// **[private:{boolean}]** Returns whether an argument is a list or not
// 
// Weight: 0
// 
// $list - **{list}** ***The list to analyze***
// 
// Styleguide Functions.is-list
is-list() {
  // arguments is injected by stylus
  if (type(arguments) == 'object') {
    return type(keys(arguments)[0]) == 'object';
  } else {
    return length(arguments) > 1 && type(arguments) != 'rgba';
  }
}

// _true-error($message, $source, $override)
// 
// **[private:{void|string}]** Throw or returns an error with a message detailing the source and error
// 
// Weight: 0
// 
// $message - **{string}** ***The error to report***
// $source - **{string}** ***The source of the error***
// $override = $_true-error-output-override.value - **{boolean}** ***Optionally override error-output for testing failure-cases***
// 
// Styleguide Functions._true-error
_true-error($message, $source, $override = $_true-error-output-override.value) {
  $error = 'ERROR [' + $source + '] ' + $message;

  if ($override) {
    return $error;
  }

  $error = '' + $error + '';
  error($error);
}

// _true-error-mixin($message, $source, $override)
// 
// **[private:{void}]** Outputs an error with a message detailing the source and error
// 
// Weight: 0
// 
// $message - **{string}** ***The error to report***
// $source - **{string}** ***The source of the error***
// $override = $_true-error-output-override.value - **{boolean}** ***Optionally override error-output for testing failure-cases***
// 
// Styleguide Mixins._true-error-mixin
_true-error-mixin($message, $source, $override = $_true-error-output-override.value) {
  $error = 'ERROR [' + $source + '] ' + $message;

  if ($override) {
    _true-message($error, 'comments');
  } else {
    error($error);
  }
}


// _true-map-increment($base, $add)
// 
// **[private:{string}]** Add hash values together
// 
// Weight: 0
// 
// $base - **{string}** ***Initial map to add values to***
// $add - **{string}** ***Map of values to be added***
// 
// Styleguide Functions._true-map-increment
_true-map-increment($base, $add) {
  for $key in (map-keys($add)) {
    $value = $add[$key];

    if ($value) {
      $base-value = $base[$key];
      $new-value = $base-value ? ($base-value + $value) : $value;
      $base[$key] = $new-value;
    }
  }

  return $base;
}

// _true-join-multiple($lists...)
// 
// **[private:{list}]** Any number of lists to be joined, with an optional final argument describing the desired list-separator ('space' or 'comma')
// 
// Weight: 0
// 
// $lists - **{list[]}** ***Lists***
// 
// Styleguide Functions._true-join-multiple
_true-join-multiple($lists...) {
  $return = ();
  $last = $lists[-1];
  $length = length($lists);

  if (unquote($last) == unquote(' ') || unquote($last) == unquote(',')) {
    $length = $length - 1;
  }

  if ($length < 2) {
    $error = 'Must provide at least 2 lists';
    return _true-error($error, '_true-join-multiple');
  }

  for $i in (0 .. ($length - 1)) {
    if (is-list($lists[$i])) {
      for $j in (0 .. (length($lists[$i]) - 1)) {
        push($return, $lists[$i][$j]);
      }
    } else {
      push($return, $lists[$i]);
    }
  }

  $first = slice($return, 0, 1);
  if (unquote($first) == unquote(' ')) {
    $return = substr($return, 1, str-length($return));
  }

  if (unquote($first) == unquote(',')) {
    $return = substr($return, 2, str-length($return));
  }

  return $return;
}
