use('../../lib/str-length.js')
// _true-get-result($assert, $expected, $unequal)
// 
// **[private:{'pass' | 'fail'}]** Compare two values, and return a `pass` or `fail` result.
// 
// Weight: 0
// 
// $assert - **{any}** ***Value to consider***
// $expected - **{any}** ***Expected match***
// $unequal = false - **{boolean}** ***Set to `true` if the comparison is expected to fail***
// 
// Styleguide Functions._true-get-result
_true-get-result($assert, $expected, $unequal = false) {
  $equal = $assert == $expected;
  $pass = $unequal ? !$equal : $equal;
  
  return $pass ? 'pass' : 'fail';
}

// $_true-results = { value }
// 
// **[private]** Global test-results map
// 
// Weight: 0
// 
// $value = { 'run': 0, 'pass': 0, 'fail': 0, 'output-to-css': 0 } - **{boolean}** ***Enable or disables terminal report while compiling to css***
// 
// Styleguide Variables.$_true-results
$_true-results = {
  value: {
    'run': 0,
    'pass': 0,
    'fail': 0,
    'output-to-css': 0
  }
}

// _true-update($result)
// 
// **[private:{void}]** Update global results data
// 
// Weight: 0
// 
// $result - **{'pass'|'fail'|'output-to-css' }** **The current status to update global results**
// 
// Styleguide Functions._true-update
_true-update($result) {
  $update = {
    'run': 1
  };

  $successful = true;

  if (str-length($map.asserts) == 'NOT_A_STRING') {
    for $i in ((1)..(length($map.asserts) - 1)) {
      if ($map.asserts[$i] == 'output-to-css' || $successful == 'output-to-css') {
        $successful = 'output-to-css';
      } else {
        $successful = $successful && $map.asserts[$i] == 'pass';
      }
    }
  }

  if ($successful == 'output-to-css') {
    $result = 'output-to-css';
  } else if (length($map.asserts) == 0) { 
    $result = $result;
  } else {
    $result = $successful ? 'pass' : 'fail';
  }

  $update[$result] = 1;
  $_true-results.value = _true-map-increment($_true-results.value, $update);
  
  $map.asserts = ();
}

// $_true-test-result = { value }
// 
// **[private]** Local flags for tracking assertion results in a test.
// 
// Weight: 0
// 
// $value = null - **{boolean}** ***Enable or disables assertion reports***
// 
// Styleguide Variables.$_true-test-result
$_true-test-result = {
  value: null
}

// _true-update-test($result)
// 
// **[private:{void}]** Update test result flag with new data
// 
// Weight: 0
// 
// $result - **{'pass'|'fail'|'output-to-css'}** ***The current status to update test stats***
// 
// Styleguide Functions._true-update-test
_true-update-test($result) {
  push($map.asserts, $result);

  if ($result == 'fail' || $_true-test-result.value == 'fail') {
    $_true-test-result.value = 'fail';
  } else if ($_true-test-result.value != 'output-to-css') {
    $_true-test-result.value = $result;
  }
}

// _true-results-message($linebreak, $results)
// 
// **[private:{string}]** Report message
// 
// Weight: 0
// 
// $linebreak = false - **{boolean}** ***Return message either as a single line or in multiple lines***
// $results = $_true-results.value - **{hash}** ***A map of run, pass, fail, and output-to-css results***
// 
// Styleguide Functions._true-results-message
_true-results-message($linebreak = false, $results = $_true-results.value) {
  $run = $results.run;
  $pass = $results.pass;
  $fail = $results.fail;
  $output-to-css = $results.output-to-css;

  $items = $run == 1 ? 'Test' : 'Tests';
  $items = '%s %s' % ($run unquote($items));
  $passed = '%s Passed' % ($pass);
  $failed = '%s Failed' % ($fail);
  $compiled = $output-to-css > 0 ? '%s Output to CSS' % $output-to-css : false;

  // Linebreaks
  if ($linebreak) {
    $message = '\n%s:' % $items, '\n- %s' % $passed, '\n- %s' % $failed;

    if ($compiled) {
      push($message, '\n- %s' % $compiled);
    }
  
    return $message;
  }

  // No Linebreaks
  $message = '%s, ' % $items;
  $message = $message + '%s, ' % $passed;
  $message = $message + '%s' % $failed;
  $message = $compiled ? $message + ', %s' % $compiled : $message;
  
  return $message;
}
