use('lib/str-length.js');

// _true-pass-details()
// 
// **[private:{output}]** Ouptut a success message for passing tests
// 
// Weight: 0
// 
// Styleguide Mixins._true-pass-details
_true-pass-details() {
  $assertion = _true-context('assert');
  $message = '✔ %s' % unquote($assertion);
  _true-message($message, 'comments', 2);
}

// _true-fail-details($assert, $expected, $terminal)
// 
// **[private:{output}]** Failure message, with appropriate details to help you debug various common problems.
// 
// Weight: 0
// 
// $assert - **{any}** ***The assertion value***
// $expected - **{any}** ***The expected value***
// $terminal = $true-terminal-output.value - **{boolean}** ***Whether to use the terminal as an output stream***
// 
// Styleguide Mixins._true-fail-details
_true-fail-details($assert, $expected, $terminal = $true-terminal-output.value) {
  $list = 'comments', 'debug';
  $location = $terminal ? $list : 'comments';

  // Title Messages
  $assertion = _true-context('assert');
  $string = typeof($assertion) == 'string' ? unquote($assertion) : $assertion;
  $title = 'FAILED: %s' % $string;
  $message = '✖ %s' % $title;
  _true-message($message, $location, 2);

  // Details Message
  $out = _true-variable-details($assert);
  $exp = _true-variable-details($expected);
  $details = '- Output: %s' % $out, '- Expected: %s' % $exp;
  _true-message($details, $location, 4);

  // Edge Failure Notes

  $assert-equal = index($assertion, '[assert-equal]');
  if ($assert-equal != null && $assert-equal >= 0) {
    $notes = _true-edgefail-notes($assert, $expected);

    if ($notes) {
      _true-message($notes, $location, 4);
    }
  }

  // Context Message
  // $module = _true-context('module');
  // $test = _true-context('test');
  // $context = '- Module: %s' % $module, '- Test: %s' % $test;
  // _true-message($context, $location, 4);

  // Terminal Warning
  if ($terminal) {
    _true-message($assertion, 'warn');
  }
}

// _true-variable-details($var)
// 
// **[private:{string}]** Provide the details (type, list-separator, quotation) for a given variable - used to provide context in failure reporting.
// 
// Weight: 0
// 
// $var - **{any}** ***Pass in asserted and expected values individually to retrieve comparable details for both***
// 
// Styleguide Functions._true-variable-details
_true-variable-details($var) {
  $inspect = s('%s' % $var);
  $type = type-of($var);

  if (is-list($var)) {
    $inspect = unquote('' + $var + '')
    $inspect = s('%s' % ($inspect))
    $separator = list-separator($var);
    $buffer = '';

    if (unquote($separator) == unquote(',')) {
      $separator = comma;

      for $line in (arguments) {
        $buffer = $buffer + $line + list-separator($var) + ' ';
      }

      $inspect = substr($buffer, 0, (str-length($buffer) - 2));
    }

    if (unquote($separator) == unquote(' ')) {
      $separator = space;
    }

    $type = '%s-list' % $separator;
  }

  if ($type == 'string') {
    if ($var != unquote($var)) {
      $type = 'quoted-%s' % unquote($type);
    }

    return '`[' + unquote($type) + '] %s`' % $inspect;
  }

  $return = '[' + $type + '] ' + $inspect;
  return $return;
}

// _true-edgefail-notes($one, $two)
// 
// **[private:{null|string}]** There are some common test failures that can be confusing, where results look identical in the output, but represent different values internally. This function looks for those edge-case failures and adds a clarifying note in the results.
// 
// Weight: 0
// 
// $one - **{any}** ***One of the values being compared***
// $two - **{any}** ***The other calue being compared***
// 
// Styleguide Functions._true-edgefail-notes
_true-edgefail-notes($lists...) {
  $one = arguments[0];
  $two = arguments[1];
  $one-type = type-of($one);
  $two-type = type-of($two);

  if (is-list($one)) {
    $one-type = 'list'
  }
  
  if (is-list($two)) {
    $two-type = 'list'
  }

  $note = null;
  $pre = '- Details: ';
  $inspect = '(set `$inspect: true` to compare output values)';

  $test-string = 'test';
  // List Separators
  if (is-list($one) && is-list($two)) {
    if (join(', ', $one, $test-string) == join(', ', $two, $test-string)) {
      $message = 'list-separators do not match';
      $note = $pre + $message;
    }
 }

  // TODO check if this is removable. Stylus doesn't differenciate between quotations
  // String Quotes
  if (($one-type == 'string' && $two-type == 'string') && (!is-list($one) && !is-list($two))) {
    if (unquote($one) == unquote($two)) {
      $message = 'string quotations do not match';
      $note = $pre + $message;
    }
  }

  $one = $one-type == 'string' ? unquote($one) : $one;
  $two = $two-type == 'string' ? unquote($two) : $two;

  if (is-list($one)) {
    $str = '' + $one + ''
    $one = s('%s' % unquote($str));
  }

  if (is-list($two)) {
    $str = '' + $two + ''
    $two = s('%s' % unquote($str));
  }
  
  if (s('%s' % $one) == s('%s' % $two)) {
    $number = false

    // Type
    if ($one-type != $two-type) {
      $message = 'variable types do not match';
      $note = $pre + $message + ' ' + $inspect;
    }

    // Rounding
    $unit = $one-type == 'unit' && $two-type == 'unit';
    $string = $one-type == 'string' && $two-type == 'string';
    $number = $unit && !$string ? (unit($one) == '' && unit($two) == '') : false
    $color = $one-type == 'rgba' && $two-type == 'rgba';
    if ($number or $color) {
      $type = $unit ? numbers : colors;
      $message = '%s may need to be rounded before comparison' % $type;
      $note = $pre + $message + ' ' + $inspect;
    }

    // Catch-All (I think this may not be currently possible)
    if (!$note) {
      $note = $pre + $inspect;
    }
  }

  return $note;
}