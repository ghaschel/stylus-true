// Pass Details

// TODO: Uncomment when figured out the issue with the stylus compiler ordering

// +test-module('pass-details [mixin]') {
//   +test('Properly output a passing assertion result') {
//     +assert('passing test') {
//       +output() {
//         _true-pass-details(); 
//       }

//       +expect() {
//         /*   ✔ [output] passing test */
//       }
//     }
//   }
// }


// TODO Pass this to output

// Variable Details
+test-module('variable-details [function]') {
  +test('Number') {
    assert-equal(_true-variable-details(1em), '[unit] 1em');
  }

  +test('Strings get back-ticks') {
    $string = 'hello world';

    assert-equal(_true-variable-details($string), '`[string] %s`' % $string);
    assert-equal(_true-variable-details('      '), '`[string] %s`' % '      ');
    assert-unequal(_true-variable-details('  '), '`[string] %s`' % '      ');
  }

  +test('Color') {
    assert-equal(_true-variable-details(#ccc), '[rgba] #ccc');
  }

  +test('Object') {
    $object = {
      key: unquote('value')
    }

    assert-equal(_true-variable-details($object), '[object] {"key":"(value)"}', null, true);
  }

  +test('Comma List') {
    $list = "one", "two three";

    assert-equal(_true-variable-details($list), '[comma-list] one, two three');
  }

  +test('Space List') {
    $list = "one" "two three";

    assert-equal(_true-variable-details($list), '[space-list] one two three');
  }
}

// EdgeFail Notes
+test-module('edgefail-notes [function]') {
  +test('Type mismatch') {
    $message = '- Details: variable types do not match (set `$inspect: true` to compare output values)';

    assert-equal(_true-edgefail-notes(1em, '1em'), $message);

    $list = 'one', 'two';
    $str = '' + $list + ''
    $string = s('%s' % unquote($str));

    assert-equal(_true-edgefail-notes($list, $string), $message);
  }

  // TODO: Check if applicable to stylus
  +test('Number rounding') {
    $message = '- Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values)';

    assert-equal(_true-edgefail-notes(1/3, 0.3333333333333333), $message);
  }

  +test('Color rounding') {
    $message = '- Details: colors may need to be rounded before comparison (set `$inspect: true` to compare output values)';

    assert-equal(_true-edgefail-notes(lighten(#246, 15%), #306090), $message);
  }

  +test('List Separators') {
    $message = '- Details: list-separators do not match';

    $space = 'one' 'two'
    $comma = 'one', 'two'

    assert-equal(_true-edgefail-notes($space, $comma), $message);
  }
}

// Fail Details 
/*     - Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values) */
+test-module('fail-details [mixin]') {
  +test('Compiles full failure details') {
    +assert() {
      +output() {
        _true-context('assert');
        _true-fail-details(1/3, 0.333333333, false);
      }

      +expect() {
        /*!   ✖ FAILED:  */
        /*!     - Output: '[unit] 0.333333333333333' */
        /*!     - Expected: '[unit] 0.333333333' */
      }
    }
  }
}
